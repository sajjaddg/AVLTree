<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>